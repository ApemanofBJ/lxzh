2020-02-03
Linux 系统类库位置: /usr/include/c++/

1. 控制台程序框架：
	#include <iostream> 		  
	using namespace std; 
		 
	int main() 
	{
		 cout << "hello" << endl; 
		 return 0; 
	}

2020-02-07
1. 注释：使用	"//"

2. using 别名使用：
	using  类型别名 = 详细类型结构;

3. tuple 元组(容器)
	声明类型	
		 using Words =  tuple<int,std::string,std::string> ;
	初始化变量	
		 Words test[] = {
			 make_tuple(1,"car","汽车"),
			 make_tuple(2,"school","学校")
		 };   
	元素调用
		 for (auto ele: test)		#循环
		 {
			 cout << get<0>(ele) << endl;
		 }

4. std::vector 矢量
	构造函数
		vector() 		#空
		vector(n) 		#元素个数为n
		vector(begin,end) 	#复制区间元素
	方法：
		push_back(value)	#尾部增加元素
		pop_back()		#尾部删除元素
	[eg]
		vector<int> V(1,0);

		for (int i=1;i<=10;i++)
		{       
			int number = rand()%10+1;

			for (int i=0;i < V.size();i++)
			{
				if (V[i] != number)
					 V.push_back(number);
			}
		}


		for (auto it=V.begin();it!=V.end();it++)
			cout << *it << endl;

5. 随机数
	const int MIN_VALUE = 10;
	const int MAX_VALUE = 18;
	number = rand() % (MAX_VALUE - MIN_VALUE + 1) + MIN_VALUE;

2020-02-08
1. 通用的列表初始化数据：{……}

2. 空指针：nullptr		#等同于0

2020-02-09
1. std::set 集合(关联式容器)
	特点：每个元素的值都唯一，而且根据元素的值自动进行排序
	
	插入元素 		insert(元素值)	
	判断是否在集合中	count(元素值)		#0 表示不在，1表示在

2020-02-16
1. std::pair 对组
         using found = pair<float,float> ;	#定义类型
 
         found  linghuo[]= {			#使用统一初始化 替代maike_pair函数
                 { 11.8,  2347.26 },
                 { 5.70,  1134.29 },
                 { 5.37,  1069.51 },
                 { 17.05, 3393.1  }
         };
 
         for (auto ele: linghuo)		#循环输出first,second 变量
                 cout << "手续费是:" << ele.first << "\t" << "交易金额是:"<< ele.second
                 << "\t"<< "比例是:" << ele.first/ele.second <<  endl;

2. 求和算法： accumulate
	#include <numeric>
	语法：accumulate(vec.begin() , vec.end() , 初值)	#用于向量的求和

         using VF = vector<float> ;
         VF vkey, vval;
 
         for (auto ele: linghuo)
         {
                 vkey.push_back(ele.first);
                 vval.push_back(ele.second);
         }
 
         float sum1(0.0),sum2(0.0);
 
         sum1 = accumulate(vkey.begin(),vkey.end(),0.0);
         sum2 = accumulate(vval.begin(),vval.end(),0.0);

2020-10-17
1. [vector]
	#include	<vector>
	初始化：
		vector(int nSize,const t& t):创建一个vector，元素个数为nSize,且值均为t 
		vector(begin,end):复制[begin,end)区间内另一个数组的元素到vector中

	template<typename T>
	vector<T> SeqVecotr(T first,T last, T step = 1)
	{
	    vector<T> v;
	    T temp = first;
	    for (int i = 0; i<=(last - first)/step; i++)
	    {
		    v.push_back(temp);
		    temp += step;
	    }

	    return v;
	}

2021年04月20日
1. 鸡兔同笼的问题：
int Jitu(int head,int foot)
{
    //x + y = head; 2x + 4y = foot
    int x = 1;
    for (;x<head;x++)
    {
        if (x*2+(head-x)*4 == foot)
        {
            return x;       //返回鸡的个数
            break;
        }
    }
    return 0;
}

2. 
#include <iomanip>		#setprecision 头文件

    float  number = 30.0f;

    while (number < 100)
	{
        auto delta = number*4 -150;

        if (abs(delta)>0 && abs(delta)<0.01)	#必须使用绝对值来确定范围
		{
            cout<<setprecision(4)  << number << endl;	#setprecision确定数字位数
            break;
		}

        number += 0.1f;
    
	}
